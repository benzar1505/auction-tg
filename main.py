from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging
import asyncio

from config import API_TOKEN, ADMINS
import db
import utils

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode='Markdown')
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ª–æ—Ç—ñ–≤ —É –ø–∞–º º—è—Ç—ñ (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É)
active_auctions = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –∞—É–∫—Ü—ñ–æ–Ω—É.\n–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤: /newlot")

@dp.message_handler(commands=['newlot'])
async def new_lot(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ—Ç–∞.")
    
    await message.answer("üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ª–æ—Ç–∞.")
    await NewLot.waiting_for_photo.set()

# FSM (Finite State Machine) –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

dp.storage = MemoryStorage()

class NewLot(StatesGroup):
    waiting_for_photo = State()
    waiting_for_year = State()
    waiting_for_start_bid = State()
    waiting_for_duration = State()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=NewLot.waiting_for_photo)
async def lot_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫:")
    await NewLot.waiting_for_year.set()

@dp.message_handler(state=NewLot.waiting_for_year)
async def lot_year(message: types.Message, state: FSMContext):
    await state.update_data(year=message.text)
    await message.answer("üíµ –í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É —Å—Ç–∞–≤–∫—É:")
    await NewLot.waiting_for_start_bid.set()

@dp.message_handler(state=NewLot.waiting_for_start_bid)
async def lot_start_bid(message: types.Message, state: FSMContext):
    await state.update_data(start_bid=int(message.text))
    await message.answer("‚è± –í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–∫—Ü—ñ–æ–Ω—É (–≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö):")
    await NewLot.waiting_for_duration.set()

@dp.message_handler(state=NewLot.waiting_for_duration)
async def lot_duration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lot_id = db.create_lot(
        photo_id=data['photo_id'],
        year=data['year'],
        start_bid=data['start_bid'],
        duration_minutes=int(message.text)
    )
    lot = db.get_lot_by_id(lot_id)
    text = utils.format_lot(lot)
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîº –ó—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É", callback_data=f"bid_{lot_id}")
    )
    await bot.send_photo(chat_id=message.chat.id, photo=data['photo_id'], caption=text, reply_markup=keyboard)
    await state.finish()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    asyncio.create_task(lot_timer(lot_id))

@dp.callback_query_handler(lambda c: c.data.startswith('bid_'))
async def handle_bid(call: types.CallbackQuery):
    lot_id = int(call.data.split('_')[1])
    lot = db.get_lot_by_id(lot_id)
    if not lot or not lot[6]:
        return await call.answer("‚õî –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    await call.message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É (—á–∏—Å–ª–æ–º):")

    @dp.message_handler()
    async def receive_bid(message: types.Message):
        bid = int(message.text)
        current = lot[3]
        if bid <= current:
            return await message.answer("‚ö†Ô∏è –°—Ç–∞–≤–∫–∞ –º–∞—î –±—É—Ç–∏ –≤–∏—â–æ—é –∑–∞ –ø–æ—Ç–æ—á–Ω—É.")
        db.update_bid(lot_id, message.from_user.id, bid)
        await message.answer("‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!")
        await call.message.edit_caption(utils.format_lot(db.get_lot_by_id(lot_id)), reply_markup=call.message.reply_markup)
        dp.message_handlers.unregister(receive_bid)

async def lot_timer(lot_id):
    lot = db.get_lot_by_id(lot_id)
    end_time = datetime.fromisoformat(lot[5])
    now = datetime.now()
    delay = (end_time - now).total_seconds()
    await asyncio.sleep(delay)
    db.close_lot(lot_id)
    lot = db.get_lot_by_id(lot_id)
    if lot[4]:
        winner_mention = f"[user](tg://user?id={lot[4]})"
        text = f"üèÅ –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner_mention}\n–°—Ç–∞–≤–∫–∞: {lot[3]} –≥—Ä–Ω"
    else:
        text = "‚ùå –ê—É–∫—Ü—ñ–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–º–æ–∂—Ü—è."
    await bot.send_message(chat_id=ADMINS[0], text=text)

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
